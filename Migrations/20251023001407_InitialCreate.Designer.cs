// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PDSCalculatorDesktop.Data;

#nullable disable

namespace PDSCalculatorDesktop.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20251023001407_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PDSCalculatorDesktop.Models.ControlPoint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double>("Distance")
                        .HasColumnType("double precision");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("ControlPoints");
                });

            modelBuilder.Entity("PDSCalculatorDesktop.Models.Discharge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<int>("ControlPointId")
                        .HasColumnType("integer");

                    b.Property<int>("EnterpriseId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<DateTime>("RegistrationAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ControlPointId");

                    b.HasIndex("EnterpriseId");

                    b.ToTable("Discharges");
                });

            modelBuilder.Entity("PDSCalculatorDesktop.Models.Enterprise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("Discharges");
                });

            modelBuilder.Entity("PDSCalculatorDesktop.Models.Measurement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ControlPointId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("DischargeId")
                        .HasColumnType("integer");

                    b.Property<int>("MeasurementType")
                        .HasColumnType("integer");

                    b.Property<int>("SubstanceId")
                        .HasColumnType("integer");

                    b.Property<double>("Value")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("ControlPointId");

                    b.HasIndex("DischargeId");

                    b.HasIndex("SubstanceId");

                    b.ToTable("Measurements", t =>
                        {
                            t.HasCheckConstraint("CK_Measurement_XOR", "(\"DischargeId\" IS NOT NULL AND \"ControlPointId\" IS NULL) OR (\"DischargeId\" IS NULL AND \"ControlPointId\" IS NOT NULL)");
                        });
                });

            modelBuilder.Entity("PDSCalculatorDesktop.Models.Substance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("GroupLFV")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("HazardClass")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("Substances");
                });

            modelBuilder.Entity("PDSCalculatorDesktop.Models.TechnicalParameters", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double>("Diameter")
                        .HasColumnType("double precision");

                    b.Property<double>("DischargeAngle")
                        .HasColumnType("double precision");

                    b.Property<int>("DischargeId")
                        .HasColumnType("integer");

                    b.Property<double>("DistanceToControlPoint")
                        .HasColumnType("double precision");

                    b.Property<double>("DistanceToShore")
                        .HasColumnType("double precision");

                    b.Property<double>("DistanceToWaterSurface")
                        .HasColumnType("double precision");

                    b.Property<double>("FlowRate")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("ValidFrom")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("WaterFlowVelocity")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("DischargeId");

                    b.ToTable("TechnicalParameters", t =>
                        {
                            t.HasCheckConstraint("CK_TechnicalParameters_Diameter", "\"Diameter\" > 0");

                            t.HasCheckConstraint("CK_TechnicalParameters_DischargeAngle", "\"DischargeAngle\" > 0");

                            t.HasCheckConstraint("CK_TechnicalParameters_DistanceToControlPoint", "\"DistanceToControlPoint\" > 0");

                            t.HasCheckConstraint("CK_TechnicalParameters_DistanceToShore", "\"DistanceToShore\" > 0");

                            t.HasCheckConstraint("CK_TechnicalParameters_DistanceToWaterSurface", "\"DistanceToWaterSurface\" > 0");

                            t.HasCheckConstraint("CK_TechnicalParameters_FlowRate", "\"FlowRate\" > 0");

                            t.HasCheckConstraint("CK_TechnicalParameters_WaterFlowVelocity", "\"WaterFlowVelocity\" > 0");
                        });
                });

            modelBuilder.Entity("PDSCalculatorDesktop.Models.Discharge", b =>
                {
                    b.HasOne("PDSCalculatorDesktop.Models.ControlPoint", "ControlPoint")
                        .WithMany("Discharges")
                        .HasForeignKey("ControlPointId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PDSCalculatorDesktop.Models.Enterprise", "Enterprise")
                        .WithMany("Discharges")
                        .HasForeignKey("EnterpriseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ControlPoint");

                    b.Navigation("Enterprise");
                });

            modelBuilder.Entity("PDSCalculatorDesktop.Models.Measurement", b =>
                {
                    b.HasOne("PDSCalculatorDesktop.Models.ControlPoint", "ControlPoint")
                        .WithMany()
                        .HasForeignKey("ControlPointId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PDSCalculatorDesktop.Models.Discharge", "Discharge")
                        .WithMany()
                        .HasForeignKey("DischargeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PDSCalculatorDesktop.Models.Substance", "Substance")
                        .WithMany()
                        .HasForeignKey("SubstanceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ControlPoint");

                    b.Navigation("Discharge");

                    b.Navigation("Substance");
                });

            modelBuilder.Entity("PDSCalculatorDesktop.Models.TechnicalParameters", b =>
                {
                    b.HasOne("PDSCalculatorDesktop.Models.Discharge", "Discharge")
                        .WithMany("TechnicalParameters")
                        .HasForeignKey("DischargeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Discharge");
                });

            modelBuilder.Entity("PDSCalculatorDesktop.Models.ControlPoint", b =>
                {
                    b.Navigation("Discharges");
                });

            modelBuilder.Entity("PDSCalculatorDesktop.Models.Discharge", b =>
                {
                    b.Navigation("TechnicalParameters");
                });

            modelBuilder.Entity("PDSCalculatorDesktop.Models.Enterprise", b =>
                {
                    b.Navigation("Discharges");
                });
#pragma warning restore 612, 618
        }
    }
}
